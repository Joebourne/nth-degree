{"version":3,"sources":["styles.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","OuterWrapper","styled","div","_templateObject2","Container","_templateObject3","Wrapper","_templateObject4","_ref","cycleSize","offsetCount","css","_templateObject5","Block","_templateObject6","Form","form","_templateObject7","InputsRow","_templateObject8","inputStyles","_templateObject9","CycleInput","input","_templateObject10","StaticSpan","span","_templateObject11","OffsetInput","_templateObject12","Submit","_templateObject13","INITIAL_CYCLE_SIZE","INITIAL_OFFSET","App","state","animationCount","updateAnimationCount","_this","setState","prevState","updateSelector","event","preventDefault","target","value","_this$state","this","array","Array","ROW_LENGTH","fill","react_default","a","createElement","map","item","index","key","concat","onSubmit","type","defaultValue","required","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8rHAEO,IAAMA,EAAcC,YAAHC,KAqBXC,EAAeC,IAAOC,IAAVC,KAOZC,EAAYH,IAAOC,IAAVG,KAqBTC,EAAUL,IAAOC,IAAVK,IAOd,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,YAAd,OAAgCC,YAAhCC,IACaH,EAAgBC,EAtCR,OA+DdG,EAAQZ,IAAOC,IAAVY,IAjEC,GA+DA,MA/DA,OAkFNC,EAAOd,IAAOe,KAAVC,KAEJC,EAAYjB,IAAOC,IAAViB,KAKhBC,EAAcT,YAAHU,KA4BJC,EAAarB,IAAOsB,MAAVC,IACnBJ,GAISK,EAAaxB,IAAOyB,KAAVC,KAKVC,EAAc3B,IAAOsB,MAAVM,IACpBT,GAKSU,EAAS7B,IAAOsB,MAAVQ,KCtIbC,EAAqB,EACrBC,EAAiB,EAmERC,6MAhEbC,MAAQ,CACN1B,UAAWuB,EACXtB,YAAauB,EACbG,eAAgB,KAIlBC,qBAAuB,WACrBC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BJ,eAAgBI,EAAUJ,eAAiB,QAI/CK,eAAiB,SAAAC,GACfA,EAAMC,iBADkB,IAETlC,EAAciC,EAAME,OAAO,GAAlCC,MACOnC,EAAgBgC,EAAME,OAAO,GAApCC,MAERP,EAAKC,SACH,iBAAO,CACL9B,YACAC,gBAEF4B,EAAKD,+FAIA,IAAAS,EAC4CC,KAAKZ,MAAhDC,EADDU,EACCV,eAAgB3B,EADjBqC,EACiBrC,UAAWC,EAD5BoC,EAC4BpC,YAE7BsC,EAAQC,MDhCOC,KCgCUC,KAAK,GAEpC,OACEC,EAAAC,EAAAC,cAACtD,EAAD,KACEoD,EAAAC,EAAAC,cAACzD,EAAD,MACAuD,EAAAC,EAAAC,cAAClD,EAAD,KACEgD,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAChD,EAAD,CAASG,UAAWA,EAAWC,YAAaA,GACzCsC,EAAMO,IAAI,SAACC,EAAMC,GAAP,OACTL,EAAAC,EAAAC,cAACzC,EAAD,CAAO6C,IAAG,GAAAC,OAAKvB,EAAL,KAAAuB,OAAuBF,QAGrCL,EAAAC,EAAAC,cAACvC,EAAD,CAAM6C,SAAUb,KAAKN,gBACnBW,EAAAC,EAAAC,cAACpC,EAAD,KACEkC,EAAAC,EAAAC,cAAChC,EAAD,CACEuC,KAAK,SACLC,aAAc9B,EACd+B,UAAQ,IAEVX,EAAAC,EAAAC,cAAC7B,EAAD,YACA2B,EAAAC,EAAAC,cAAC1B,EAAD,CACEiC,KAAK,SACLC,aAAc7B,EACd8B,UAAQ,IAEVX,EAAAC,EAAAC,cAACxB,EAAD,CAAQ+B,KAAK,SAAShB,MAAM,+BAxDxBmB,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4fc7b68.chunk.js","sourcesContent":["import styled, { css, createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html, body {\n    background-color: black;\n    font-family: Arial, Helvetica, sans-serif;\n    color: white;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  div#root {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst ROW_LENGTH = 10;\nexport const GRID_SIZE = ROW_LENGTH * ROW_LENGTH;\nconst ANIMATION_DURATION = 600;\n\nexport const OuterWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 100%;\n`;\n\nexport const Container = styled.div`\n  @media (max-width: 960px) {\n    padding: 0 20px;\n  }\n\n  margin: 0 auto;\n  position: relative;\n\n  @media (min-width: 768px) {\n    max-width: 50%;\n  }\n\n  @media (min-width: 960px) {\n    max-width: 40%;\n  }\n\n  @media (min-width: 1220px) {\n    max-width: 30%;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 20px;\n  margin-bottom: 20px;\n\n  & > * {\n    ${({ cycleSize, offsetCount }) => css`\n      :nth-child(${cycleSize}n + ${offsetCount}) {\n        border: none;\n\n        @keyframes swell {\n          from {\n            transform: scale(0.4) rotate(0);\n            background-color: red;\n          }\n          to {\n            transform: scale(0.8) rotate(315deg);\n            background-color: darkred;\n          }\n        }\n\n        animation-iteration-count: infinite;\n        animation-name: swell;\n        animation-duration: ${ANIMATION_DURATION}ms;\n        animation-direction: alternate;\n      }\n    `}\n  }\n`;\n\nconst MARGIN_PCT = 1;\n\nexport const Block = styled.div`\n  padding: calc(100% / ${ROW_LENGTH} / 2 - ${MARGIN_PCT}%);\n  margin: ${MARGIN_PCT}%;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: ${MARGIN_PCT}%;\n\n  /* // first item on a row shouldn't have margin-left */\n  :nth-child(${ROW_LENGTH}n - 9) {\n    margin-left: 0;\n  }\n\n  /* // last item on a row shouldn't have margin-right */\n  :nth-child(${ROW_LENGTH}n) {\n    margin-right: 0;\n  }\n`;\n\nexport const Form = styled.form``;\n\nexport const InputsRow = styled.div`\n  display: flex;\n  align-items: baseline;\n`;\n\nconst inputStyles = css`\n  background-color: transparent;\n  color: white;\n  border: none;\n  font-size: 24px;\n  border-bottom: 2px solid white;\n  width: 11.25%;\n  text-align: center;\n  height: 50px;\n  display: flex;\n  align-items: center;\n\n  &::selection {\n    color: black;\n    background-color: white;\n  }\n\n  &:focus {\n    outline: 2px solid white;\n  }\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const CycleInput = styled.input`\n  ${inputStyles};\n  margin-right: 5%;\n`;\n\nexport const StaticSpan = styled.span`\n  font-size: 24px;\n  width: 10%;\n`;\n\nexport const OffsetInput = styled.input`\n  ${inputStyles};\n  margin-left: 5%;\n  margin-right: 5%;\n`;\n\nexport const Submit = styled.input`\n  display: block;\n  margin: 0;\n  border: none;\n  padding: 0 20px;\n  font-size: 20px;\n  transition: transform 0.1s\n  width: 50%;\n  height: 54px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.2);\n  color: white;\n\n  &:focus, &:visited {\n    border: none;\n    outline: none;\n  }\n\n  &:active {\n    transform: scale(0.98);\n    border: 2px solid white;\n  }\n`;\n","import React from 'react';\n\nimport {\n  OuterWrapper,\n  GlobalStyle,\n  Container,\n  Wrapper,\n  Block,\n  Form,\n  InputsRow,\n  CycleInput,\n  StaticSpan,\n  OffsetInput,\n  Submit,\n} from './styles';\n\nimport { GRID_SIZE } from './styles';\n\nconst INITIAL_CYCLE_SIZE = 3;\nconst INITIAL_OFFSET = 0;\n\nclass App extends React.Component {\n  state = {\n    cycleSize: INITIAL_CYCLE_SIZE,\n    offsetCount: INITIAL_OFFSET,\n    animationCount: 0,\n  };\n\n  // needed to provide unique keys to the blocks\n  updateAnimationCount = () => {\n    this.setState(prevState => ({\n      animationCount: prevState.animationCount + 1,\n    }));\n  };\n\n  updateSelector = event => {\n    event.preventDefault();\n    const { value: cycleSize } = event.target[0];\n    const { value: offsetCount } = event.target[1];\n\n    this.setState(\n      () => ({\n        cycleSize,\n        offsetCount,\n      }),\n      this.updateAnimationCount,\n    );\n  };\n\n  render() {\n    const { animationCount, cycleSize, offsetCount } = this.state;\n\n    const array = Array(GRID_SIZE).fill(1);\n\n    return (\n      <OuterWrapper>\n        <GlobalStyle />\n        <Container>\n          <h1>nth-degree</h1>\n          <Wrapper cycleSize={cycleSize} offsetCount={offsetCount}>\n            {array.map((item, index) => (\n              <Block key={`${animationCount}-${index}`} />\n            ))}\n          </Wrapper>\n          <Form onSubmit={this.updateSelector}>\n            <InputsRow>\n              <CycleInput\n                type=\"number\"\n                defaultValue={INITIAL_CYCLE_SIZE}\n                required\n              />\n              <StaticSpan>n +</StaticSpan>\n              <OffsetInput\n                type=\"number\"\n                defaultValue={INITIAL_OFFSET}\n                required\n              />\n              <Submit type=\"submit\" value=\"Update selector\" />\n            </InputsRow>\n          </Form>\n        </Container>\n      </OuterWrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}